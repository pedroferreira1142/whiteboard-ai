// ReportPDFGenerator.tsx
import React from 'react';
import { useSelector } from 'react-redux';
import {
  PDFDownloadLink,
  Document,
  Page,
  Text,
  View,
  StyleSheet,
} from '@react-pdf/renderer';
import { RootState } from "../../redux/store";

// Type definition for the report
export interface ReportType {
  id: number;             // Unique report ID
  whiteboard_id: number;  // The whiteboard this report belongs to
  title: string;          // Report title (markdown formatted)
  introduction: string;   // Introduction generated by LLM (markdown formatted)
  body: string;           // The main body of the report (markdown formatted)
  conclusion: string;     // Conclusion generated by LLM (markdown formatted)
}

// Create styles for your PDF document using @react-pdf/renderer StyleSheet
const styles = StyleSheet.create({
  page: {
    padding: 30,
    fontSize: 12,
    lineHeight: 1.5,
    fontFamily: 'Helvetica',
  },
  section: {
    marginBottom: 20,
  },
  // Markdown heading styles
  h1: {
    fontSize: 24,
    marginBottom: 10,
  },
  h2: {
    fontSize: 20,
    marginBottom: 8,
  },
  h3: {
    fontSize: 16,
    marginBottom: 6,
  },
  h4: {
    fontSize: 14,
    marginBottom: 4,
  },
  // Paragraph style
  paragraph: {
    marginBottom: 6,
  },
  // List item style
  listItem: {
    marginLeft: 10,
    marginBottom: 4,
  },
  // Code block style
  codeBlock: {
    fontFamily: 'Courier',
    fontSize: 10,
    backgroundColor: '#f5f5f5',
    padding: 5,
    marginBottom: 10,
  },
  // Inline code style
  inlineCode: {
    fontFamily: 'Courier',
    backgroundColor: '#f5f5f5',
    paddingHorizontal: 2,
  },
  // Bold text style
  bold: {
    fontWeight: 'bold',
  },
});

// A helper to process inline formatting (bold and inline code) in a given text.
const parseInline = (text: string): JSX.Element[] => {
  // This regex will match either inline code segments (`` `code` ``) or bold segments (**bold**)
  const parts = text.split(/(`[^`]+`|\*\*[^*]+\*\*)/g).filter(Boolean);
  return parts.map((part, idx) => {
    if (part.startsWith('`') && part.endsWith('`')) {
      return (
        <Text key={idx} style={styles.inlineCode}>
          {part.slice(1, -1)}
        </Text>
      );
    } else if (part.startsWith('**') && part.endsWith('**')) {
      return (
        <Text key={idx} style={styles.bold}>
          {part.slice(2, -2)}
        </Text>
      );
    }
    return <Text key={idx}>{part}</Text>;
  });
};

// Improved markdown renderer that supports headings, lists, code blocks, and inline formatting.
const renderMarkdown = (markdown: string): JSX.Element[] => {
  const lines = markdown.split('\n');
  const output: JSX.Element[] = [];
  let insideCodeBlock = false;
  let codeBlockContent = '';

  lines.forEach((line, index) => {
    // Check for code block delimiters
    if (line.trim().startsWith('```')) {
      if (!insideCodeBlock) {
        // Starting a code block
        insideCodeBlock = true;
        codeBlockContent = '';
      } else {
        // Ending the code block â€“ render the collected content.
        output.push(
          <Text key={index} style={styles.codeBlock}>
            {codeBlockContent.trimEnd()}
          </Text>
        );
        insideCodeBlock = false;
        codeBlockContent = '';
      }
      return;
    }

    // Accumulate code block content if inside one.
    if (insideCodeBlock) {
      codeBlockContent += line + '\n';
      return;
    }

    // Process the line normally.
    const trimmed = line.trim();

    // Blank lines yield a newline spacer.
    if (trimmed === '') {
      output.push(<Text key={index}>{'\n'}</Text>);
      return;
    }

    // Headings (check for 4 hashes before 3, etc.)
    if (trimmed.startsWith('#### ')) {
      output.push(
        <Text key={index} style={styles.h4}>
          {parseInline(trimmed.replace(/^####\s+/, ''))}
        </Text>
      );
      return;
    }
    if (trimmed.startsWith('# ')) {
      output.push(
        <Text key={index} style={styles.h1}>
          {parseInline(trimmed.replace(/^#\s+/, ''))}
        </Text>
      );
      return;
    }
    if (trimmed.startsWith('## ')) {
      output.push(
        <Text key={index} style={styles.h2}>
          {parseInline(trimmed.replace(/^##\s+/, ''))}
        </Text>
      );
      return;
    }
    if (trimmed.startsWith('### ')) {
      output.push(
        <Text key={index} style={styles.h3}>
          {parseInline(trimmed.replace(/^###\s+/, ''))}
        </Text>
      );
      return;
    }

    // List items: detect either a numbered list (e.g. "1. ") or a bullet list ("- " or "* ").
    if (/^(\d+\.)\s/.test(trimmed) || /^[-*]\s/.test(trimmed)) {
      output.push(
        <Text key={index} style={styles.listItem}>
          {parseInline(trimmed)}
        </Text>
      );
      return;
    }

    // Otherwise, treat as a regular paragraph.
    output.push(
      <Text key={index} style={styles.paragraph}>
        {parseInline(trimmed)}
      </Text>
    );
  });

  // If the markdown ended while still inside a code block, flush the content.
  if (insideCodeBlock && codeBlockContent) {
    output.push(
      <Text key={lines.length} style={styles.codeBlock}>
        {codeBlockContent.trimEnd()}
      </Text>
    );
  }

  return output;
};

// PDFDocument component renders the report content as a PDF document.
interface PDFDocumentProps {
  report: ReportType;
}

const PDFDocument: React.FC<PDFDocumentProps> = ({ report }) => (
  <Document>
    <Page style={styles.page}>
      {/* Title Section */}
      <View style={styles.section}>{renderMarkdown(report.title)}</View>

      {/* Introduction Section */}
      <View style={styles.section}>{renderMarkdown(report.introduction)}</View>

      {/* Body Section */}
      <View style={styles.section}>{renderMarkdown(report.body)}</View>

      {/* Conclusion Section */}
      <View style={styles.section}>{renderMarkdown(report.conclusion)}</View>
    </Page>
  </Document>
);

// Main component that uses Redux to retrieve the active report and provides a download link for the PDF.
const ReportPDFGenerator: React.FC = () => {
  // Retrieve the active report from the Redux store.
  const report = useSelector((state: RootState) => state.whiteboard.activeReport);

  if (!report) {
    return <div>No report available.</div>;
  }

  return (
    <div style={{display: 'flex', justifyContent: 'flex-end', alignItems: 'center', borderTop: '2px solid #ddd', paddingTop: 5}}>
      <PDFDownloadLink
        document={<PDFDocument report={report} />}
        fileName={`report-${report.id}.pdf`}
        style={{
          textDecoration: 'none',
          padding: '10px 15px',
          color: '#fff',
          backgroundColor: '#007bff',
          border: 'none',
          borderRadius: '4px',
        }}
      >
        Download Report as PDF
      </PDFDownloadLink>
    </div>
  );
};

export default ReportPDFGenerator;
